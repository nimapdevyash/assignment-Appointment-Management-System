#!/usr/bin/env node

/**
 * Module dependencies
 */
const http = require("http");
const debug = require("debug")("node-starter-kit:server");
const app = require("../index");
const connectToDatabase = require("../config/database");
const { connectToRedis } = require("../config/redis");

/**
 * Setup
 */
const PORT = normalizePort(process.env.PORT || "3000");
app.set("port", PORT);
const server = http.createServer(app);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  return isNaN(port) ? val : port >= 0 ? port : false;
}

/**
 * Start the server
 */
async function startServer() {
  try {
    console.log("üöÄ Starting server...");

    // Connect to DB & Redis
    await connectToDatabase();
    await connectToRedis();

    // Start HTTP server
    server.listen(PORT, () => {
      const actualPort = server.address().port;
      console.log(`‚úÖ Server is listening on port ${actualPort}`);
      debug(`Express server listening on port ${actualPort}`);
    });

    // Register event listeners
    server.on("error", onError);
    server.on("listening", onListening);

  } catch (err) {
    console.error("‚ùå Failed to start the server\n", err);
    process.exit(1);
  }
}

/**
 * Handle server errors
 */
function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof PORT === "string" ? "Pipe " + PORT : "Port " + PORT;

  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Log server listening
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

// Start the app
startServer();
